syntax = "proto3";

option go_package = "github.com/ag-computational-bio/bakta-web-api/go/api";

import "google/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

import "protoc/gateway/options/annotations.proto";


service BaktaJobs {
    rpc InitJob(InitJobRequest) returns (InitJobResponse) {
        option (google.api.http) = {
            post: "/api/v1/job/init"
            body: "*"
        };
    }

    rpc StartJob(StartJobRequest) returns (Empty)  {
        option (google.api.http) = {
            post: "/api/v1/job/start"
            body: "*"
        };
    }
    rpc GetJobsStatus(JobStatusRequestList) returns (JobStatusReponseList) {
        option (google.api.http) = {
            post: "/api/v1/job/list"
            body: "*"
        };
    }

    rpc GetJobResult(JobAuth) returns (JobResultResponse) {
        option (google.api.http) = {
            post: "/api/v1/job/result"
            body: "*"
        };
    }

    rpc Version(Empty) returns (VersionResponse) {
        option (google.api.http) = {
            get: "/api/v1/version"
        };
    }
}

message InitJobRequest {
    RepliconTableType repliconTableType = 1;
    string name = 2;
}

message VersionResponse {
    string toolVersion = 1;
    string dbVersion = 2;
    string backendVersion = 3;
}

message InitJobResponse {
   string uploadLinkFasta = 1;
   string uploadLinkProdigal = 2;
   string uploadLinkReplicons = 3;
   JobAuth job = 4;
}

message StartJobRequest {
    JobAuth job = 1;
    JobConfig config = 2;
    string jobConfigString = 3;
}

message JobConfig {
    bool hasProdigal = 1;
    bool hasReplicons = 2;
    int32 translationalTable = 3;
    bool completeGenome = 4;
    bool keepContigHeaders = 5;
    int64 minContigLength = 6;
    DermType dermType = 7;
    string genus = 8;
    string species = 9;
    string strain = 10;
    string plasmid = 11;
    string locus = 12;
    string locus_tag = 13;
}


message JobStatusReponseList {
    repeated JobStatusResponse jobs = 1;
    repeated FailedJob failedJobs = 2;
}

message JobStatusResponse {
    string jobID = 1;
    JobStatusEnum jobStatus = 2;
    google.protobuf.Timestamp started = 3;
    google.protobuf.Timestamp updated = 4;
    string name = 5;
}

message JobResultResponse {
    string jobID = 1;
    google.protobuf.Struct ResultFiles = 2;
    google.protobuf.Timestamp started = 3;
    google.protobuf.Timestamp updated = 4;
    string name = 5;
}

message JobStatusRequestList {
    repeated JobAuth jobs = 1;
}

message FailedJob {
    string jobID = 1;
    JobFailedStatus jobStatus = 2;
}

enum JobFailedStatus {
    NOT_FOUND = 0;
    UNAUTHORIZED = 1;
}

message JobAuth {
    string secret = 1;
    string jobID = 2;
}

message Empty{}

enum DermType {
    UNKNOWN = 0;
    monoderm = 1;
    diderm = 2;
}

enum RepliconTableType {
    csv = 0;
    tsv = 1;
}

enum JobStatusEnum {
    INIT = 0;
    RUNNING = 1;
    SUCCESSFULL = 2;
    ERROR = 3;
}

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "Bakta Jobs API"
        version: "0.1"
        contact: {
            name: ""
            url: ""
        };
    };
    security_definitions: {
        security: {
            key: "ApiKeyAuth";
            value: {
                type: TYPE_API_KEY;
                in: IN_HEADER;
                name: "Authorization";
            }
        }
    }
    security: {
		security_requirement: {
			key: "ApiKeyAuth";
			value: {};
		}
	}
    schemes: [HTTPS,HTTP]
    consumes: "application/json"
    produces: "application/json"
    responses: {
        key: "404"
        value: {
            description: "Returned when the resource does not exist."
            schema: {
                json_schema: {
                    type: STRING
                };
            };
        };
    };
};